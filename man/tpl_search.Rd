% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/tpl_search.r
\name{tpl_search}
\alias{tpl_search}
\title{Search ThePlantList from local SQL database}
\usage{
tpl_search(genus = NULL, species = NULL, family = NULL,
  authority = NULL, status = NULL, kewid = NULL, operand = "AND",
  sql = NULL)
}
\arguments{
\item{genus}{(character) A genus name, e.g. "Poa"}

\item{species}{(character) An epithet name, e.g,. "annua"}

\item{family}{(character) A family name, e.g., "Poaceae"}

\item{authority}{(character) Taxonomic authority, e.g., "L.".}

\item{status}{(character) Taxonomic status, one of "Accepted" or ""}

\item{kewid}{(character) A kew id, e.g., "kew-47692"}

\item{operand}{(character) One of "AND" or "OR", only used when more than one parameter
passed in, combining them. "AND" means both A and B have to be found, whereas "OR" means
the search looks for A or B.}

\item{sql}{A SQL query string. Make sure you include \code{plantlist} as the table name,
unless you want to go modify the table name yourself in Postgres to use a different name.
See examples for queries. If this parameter is used, the other parameters are ignored.}
}
\description{
Search ThePlantList from local SQL database
}
\details{
\code{\link[taxize]{tpl_search}} does local search of theplantlist SQL data.
This function used to wrap the \code{Taxonstand} package, but now does local SQL queries,
which are more powerful. If you want \code{Taxonstand} functions, we encourage you to go
use that pacakge.

\code{\link{tpl_search}} does a limited set of searches, simply searching for matches via
\code{variable like 'name'} like queries for variables that you pass in. If you want the
full power of SQL, use \code{XXX} and \code{\link{dplyr}} to interact directly with the
Thplantlist database.
}
\examples{
\dontrun{
backend_get()
backend_set("localsql")

# pass in parameters to search particular fields
tpl_search(genus = "Acanthus")
tpl_search(species = "caudatus")
tpl_search(genus = "Acanthus", species = "caudatus", operand="AND")
tpl_search(genus = "Acanthus", species = "caudatus", operand="OR")
tpl_search(kewid = "kew-47692")
tpl_search(status = "Accepted")

# use raw SQL query
## NOTE: it's important to use 'plantlist' as the table name
query <- "SELECT * from plantlist where species like 'annua' limit 5"
tpl_search(sql = query)

# Or use the SQL database directly with dplyr
## initialize connection to database
library("dplyr")
tpl_db <- src_postgres(dbname="plantlistdb")
## A sql query
tbl(tpl_db, sql("SELECT * from plantlist limit 3")) \%>\% collect()
## R like query
tbl(tpl_db, "plantlist") \%>\% filter(species == "caudatus")
tbl(tpl_db, "plantlist") \%>\%
  filter(genus == "Quercus") \%>\%
  arrange(desc(species))
}
}
\seealso{
\code{\link[taxize]{tpl_get}}, \code{\link[taxize]{tpl_families}}, both of which
download files from theplantlist.org website
}

